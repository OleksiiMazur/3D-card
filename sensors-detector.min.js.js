"use strict";(function(sensorsChecker){if(typeof define==='function'&&define.amd){define(sensorsChecker)}else{window.sensorsChecker=sensorsChecker()}})(function(){var sensorsChecker,eventsMap={"devicemotion":{"event":"DeviceMotionEvent","handler":function(e){if(e.acceleration&&e.acceleration.x!==null&&e.acceleration.y!==null&&eventsMap.devicemotion.support===!1){eventsMap.devicemotion.support=!0}},support:!1},"deviceorientation":{"event":"DeviceOrientationEvent","handler":function(e){if(e.beta!==null&&e.gamma!==null&&eventsMap.deviceorientation.support===!1){eventsMap.deviceorientation.support=!0}},support:!1}},DEFAULT_DELAY=500;sensorsChecker={check:function(event,success,failure,options){options=options?options:{};options.delay=options.delay?options.delay:DEFAULT_DELAY;if(!eventsMap[event]){throw new Error("Only devicemotion or deviceorientation events supported")}
        if(typeof success!=="function"){throw new Error("success callback missing")}
        if(typeof failure!=="function"){throw new Error("failure callback missing")}
        if(window[eventsMap[event].event]){if(options&&options.userAgentCheck&&options.userAgentCheck instanceof RegExp&&options.userAgentCheck.test(window.navigator.userAgent)){success()}
        else{window.addEventListener(event,eventsMap[event].handler,!1);setTimeout(function(){window.removeEventListener(event,eventsMap[event].handler);if(eventsMap[event].support===!0){success()}
        else{failure()}},options.delay)}}
        else{failure()}},checkDevicemotion:function(success,failure,options){this.check('devicemotion',success,failure,options)},checkDeviceorientation:function(success,failure,options){this.check('deviceorientation',success,failure,options)}};return sensorsChecker})